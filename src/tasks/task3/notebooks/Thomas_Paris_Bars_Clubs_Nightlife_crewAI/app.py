# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wqIHanf2e7znJ5ch2E7zk7gopEqWHI29
"""

##*************************************************************************************************************************************************************************
##**Contributor: Thomas James**
## **Date: 13th June 2024**
## Streamlit application code using crewAI for Night Club & Bar Advisor.
## One agent advises based on user's level of energy. A second agent advises based on musical-culture and genre preference. A third agent advises based on dancing preference.


## To run this application on VS code, use the command "streamlit run app.py"
##**************************************************************************************************************************************************************************

import os
from crewai import Crew
from textwrap import dedent
from advisor_agents import Night_Life_Advisor
from advisor_tasks import Advisor_Tasks
import streamlit as st
import base64

from dotenv import load_dotenv
load_dotenv()

st.set_page_config(page_icon="👨‍⚕️", layout="wide")

class Advisor_Crew:

    def __init__(self, origin, destination, interests , questions):
        self.origin = origin
        self.destination = destination
        self.interests = interests
        self.questions = questions
        self.answers = []


    def ask_questions(self):
        print("Please answer the following questions:")
        self.answers = []  # Will clear previous answers if any exist
        for key, question in self.questions:
            if isinstance(question, str):
                answer = st.text_area(question + " ")

                self.answers.append((key,answer))
            else:
                print("Invalid question format. Skipping question.",key)

    def get_answers(self):
        return self.answers

    def run(self):
        agents = Night_Life_Advisor()
        tasks = Advisor_Tasks()

        energy_level_advisor_agent = agents.energy_level()
        musical_genre_and_culture_advisor_agent = agents.musical_genre_and_culture()
        dancing_style_preference_advisor_agent = agents.dancing_style_preference()


        energy_level_assessment_task = tasks.energy_level_assessment_task(
        energy_level_advisor_agent,
        self.origin,
        self.destination,
        self.answers,
        )

        musical_genre_and_culture_identification_task = tasks.musical_genre_and_culture_identification_task(
        musical_genre_and_culture_advisor_agent,
        self.origin,
        self.destination,
        self.interests
        )

        dancing_preference_assessment_task = tasks.dancing_preference_assessment_task(
        dancing_style_preference_advisor_agent,
        self.origin,
        self.destination,
        self.interests
        )

        crew = Crew(
        agents=[
            energy_level_advisor_agent, musical_genre_and_culture_advisor_agent, dancing_style_preference_advisor_agent
        ],
        tasks=[energy_level_assessment_task, musical_genre_and_culture_identification_task, dancing_preference_assessment_task],
        full_output=True,
        verbose=2,
        output_log_file=True,
        )

        result = crew.kickoff()
        return result

def main():
    st.title("Nightlife Club & Bar Advisor")

    st.subheader("Welcome to Paris' Nightlife Club & Bar Advisor!",
                 divider="rainbow", anchor=False)
    st.markdown("Answer the questions in the sidebar to continue.")


    with st.sidebar:
        st.header("👇 Enter your trip details")
        with st.sidebar:
            origin = st.text_input("Where are you currently located?")

            destination = st.text_input("Where do you wish to travel in Paris?")

            interests = st.text_area("What are your interests?")

            questions = [
              ("total_energy_level", "Are you looking for a high-energy night out with lots of dancing, socializing with a lively crowd, or a quieter environment where you can have deeper conversations?"),
              ("mood", "How would you describe your current mood? Adventurous and Spontaneous? Casual and Low-Key? Sophisticated and Classy? or Social and Outgoing?"),
              ("social_energy", "Are you in the mood to meet new people or just hang out with your friends? How much interaction are you comfortable with tonight; a lot, some, of just a little?"),
              ("cultural_background", "Are there any particular types of music or dance from your culture that you enjoy and would like to experience here in Paris? Is there a specific atmosphere that you find comfortable or enjoyable based on your cultural background?"),
              ("music_genre", "What type of music do you enjoy the most? Do you enjoy live music shows, or do you prefer DJ sets that keep the party going all night? What type of music gets you excited to go out?"),
              ("dancing_preferred", "When you think about going out, do you imagine yourself dancing the night away or sitting back and enjoying the music? How do you feel about going to places with energetic dance floors versus more laid-back lounges?"),
              ("dancing_style", "Do you prefer structured dance styles like ballroom or more free-form styles like contemporary or hip-hop? Do you like large, energetic dance floors or more intimate, cozy spots for dancing?"),
              ("watching_sports", "Do you enjoy the energy of a crowded sports bar, or do you prefer a more relaxed environment? Would you like to be in a place where you can meet and chat with other sports fans?"),
              ("how_much_drinking", "Are you looking for places where you can meet and socialize with other drinkers? Do you prefer a lively, party atmosphere or a more relaxed setting for drinking?"),
              ("personal_background", "Are there any cultural elements or themes that you enjoy in a nightlife setting, such as specific music genres, cuisines, or drinks? Do you prefer venues that attract a certain type of crowd, such as professionals, students, or a mix?"),
          ]
            advisor_crew = Advisor_Crew(origin, destination, interests, questions)
            advisor_crew.ask_questions()
            answers = advisor_crew.get_answers()
            # Count the number of tuples with non-empty second elements
            count_non_empty = sum(1 for key, value in answers if value)


    # Check if any user input is empty before setting submitted
    submitted = st.button("**Submit**")

    if submitted and all([origin, destination, interests]) and count_non_empty >= 6:

        with st.status("🤖 **Agents at Work...**", state="running", expanded=True) as status:
            with st.container(height=500, border=False):
                result = advisor_crew.run()
            status.update(label="✅ Your Advice!",
                        state="complete", expanded=False)

        st.subheader("Here is Your Advice", anchor=False, divider="rainbow")

        task_outputs = result.get('tasks_outputs', [])
        headers = ['Energy Levels','Musical Genre & Culture','Dancing Style']
        # Loop through each TaskOutput and display information
        for header, task_output in zip(headers, task_outputs):
            with st.expander(header):
                st.write(f"{task_output.raw_output}")

if __name__=="__main__":
    main()